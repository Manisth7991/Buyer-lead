// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relationships
  accounts Account[]
  sessions Session[]

  // Application relationships
  buyers         Buyer[]
  buyerHistories BuyerHistory[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Buyer {
  id           String   @id @default(cuid())
  fullName     String
  email        String?
  phone        String
  city         City
  propertyType PropertyType
  bhk          BHK?
  purpose      Purpose
  budgetMin    Int?
  budgetMax    Int?
  timeline     Timeline
  source       Source
  status       Status   @default(NEW)
  notes        String?
  tags         String   @default("[]")
  ownerId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  owner   User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  history BuyerHistory[]

  @@map("buyers")
}

model BuyerHistory {
  id        String   @id @default(cuid())
  buyerId   String
  changedBy String
  changedAt DateTime @default(now())
  diff      Json

  // Relationships
  buyer     Buyer @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  changedByUser User  @relation(fields: [changedBy], references: [id])

  @@map("buyer_history")
}

enum City {
  CHANDIGARH
  MOHALI
  ZIRAKPUR
  PANCHKULA
  OTHER
}

enum PropertyType {
  APARTMENT
  VILLA
  PLOT
  OFFICE
  RETAIL
}

enum BHK {
  STUDIO
  ONE
  TWO
  THREE
  FOUR
}

enum Purpose {
  BUY
  RENT
}

enum Timeline {
  ZERO_TO_THREE_MONTHS
  THREE_TO_SIX_MONTHS
  MORE_THAN_SIX_MONTHS
  EXPLORING
}

enum Source {
  WEBSITE
  REFERRAL
  WALK_IN
  CALL
  OTHER
}

enum Status {
  NEW
  QUALIFIED
  CONTACTED
  VISITED
  NEGOTIATION
  CONVERTED
  DROPPED
}